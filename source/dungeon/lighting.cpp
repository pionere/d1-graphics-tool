/**
 * @file lighting.cpp
 *
 * Implementation of light and vision.
 */
#include "all.h"

DEVILUTION_BEGIN_NAMESPACE

/**
 * CrawlTable specifies X- and Y-coordinate deltas from a missile target coordinate.
 *
 * n=4
 *
 *    y
 *    ^
 *    |  1
 *    | 3#4
 *    |  2
 *    +-----> x
 *
 * n=16
 *
 *    y
 *    ^
 *    |  314
 *    | B7 8C
 *    | F # G
 *    | D9 AE
 *    |  526
 *    +-------> x
 */
const int8_t CrawlTable[2749] = {
	// clang-format off
	1,										//  0 - 0
	  0,  0,
	4,										//  1 - 3
	  0,  1,    0, -1,   -1,  0,    1,  0,
	16,										//  2 - 12
	  0,  2,    0, -2,   -1,  2,    1,  2,
	 -1, -2,    1, -2,   -1,  1,    1,  1,
	 -1, -1,    1, -1,   -2,  1,    2,  1,
	 -2, -1,    2, -1,   -2,  0,    2,  0,
	24,						 				//  3 - 45
	  0,  3,    0, -3,   -1,  3,    1,  3,
	 -1, -3,    1, -3,   -2,  3,    2,  3,
	 -2, -3,    2, -3,   -2,  2,    2,  2,
	 -2, -2,    2, -2,   -3,  2,    3,  2,
	 -3, -2,    3, -2,   -3,  1,    3,  1,
	 -3, -1,    3, -1,   -3,  0,    3,  0,
	32,										//  4 - 94
	  0,  4,    0, -4,   -1,  4,    1,  4,
	 -1, -4,    1, -4,   -2,  4,    2,  4,
	 -2, -4,    2, -4,   -3,  4,    3,  4,
	 -3, -4,    3, -4,   -3,  3,    3,  3,
	 -3, -3,    3, -3,   -4,  3,    4,  3,
	 -4, -3,    4, -3,   -4,  2,    4,  2,
	 -4, -2,    4, -2,   -4,  1,    4,  1,
	 -4, -1,    4, -1,   -4,  0,    4,  0,
	40,							 			//  5 - 159
	  0,  5,    0, -5,   -1,  5,    1,  5,
	 -1, -5,    1, -5,   -2,  5,    2,  5,
	 -2, -5,    2, -5,   -3,  5,    3,  5,
	 -3, -5,    3, -5,   -4,  5,    4,  5,
	 -4, -5,    4, -5,   -4,  4,    4,  4,
	 -4, -4,    4, -4,   -5,  4,    5,  4,
	 -5, -4,    5, -4,   -5,  3,    5,  3,
	 -5, -3,    5, -3,   -5,  2,    5,  2,
	 -5, -2,    5, -2,   -5,  1,    5,  1,
	 -5, -1,    5, -1,   -5,  0,    5,  0,
	48,										//  6 - 240
	  0,  6,    0, -6,   -1,  6,    1,  6,
	 -1, -6,    1, -6,   -2,  6,    2,  6,
	 -2, -6,    2, -6,   -3,  6,    3,  6,
	 -3, -6,    3, -6,   -4,  6,    4,  6,
	 -4, -6,    4, -6,   -5,  6,    5,  6,
	 -5, -6,    5, -6,   -5,  5,    5,  5,
	 -5, -5,    5, -5,   -6,  5,    6,  5,
	 -6, -5,    6, -5,   -6,  4,    6,  4,
	 -6, -4,    6, -4,   -6,  3,    6,  3,
	 -6, -3,    6, -3,   -6,  2,    6,  2,
	 -6, -2,    6, -2,   -6,  1,    6,  1,
	 -6, -1,    6, -1,   -6,  0,    6,  0,
	56,										//  7 - 337
	  0,  7,    0, -7,   -1,  7,    1,  7,
	 -1, -7,    1, -7,   -2,  7,    2,  7,
	 -2, -7,    2, -7,   -3,  7,    3,  7,
	 -3, -7,    3, -7,   -4,  7,    4,  7,
	 -4, -7,    4, -7,   -5,  7,    5,  7,
	 -5, -7,    5, -7,   -6,  7,    6,  7,
	 -6, -7,    6, -7,   -6,  6,    6,  6,
	 -6, -6,    6, -6,   -7,  6,    7,  6,
	 -7, -6,    7, -6,   -7,  5,    7,  5,
	 -7, -5,    7, -5,   -7,  4,    7,  4,
	 -7, -4,    7, -4,   -7,  3,    7,  3,
	 -7, -3,    7, -3,   -7,  2,    7,  2,
	 -7, -2,    7, -2,   -7,  1,    7,  1,
	 -7, -1,    7, -1,   -7,  0,    7,  0,
	64,										//  8 - 450
	  0,  8,    0, -8,   -1,  8,    1,  8,
	 -1, -8,    1, -8,   -2,  8,    2,  8,
	 -2, -8,    2, -8,   -3,  8,    3,  8,
	 -3, -8,    3, -8,   -4,  8,    4,  8,
	 -4, -8,    4, -8,   -5,  8,    5,  8,
	 -5, -8,    5, -8,   -6,  8,    6,  8,
	 -6, -8,    6, -8,   -7,  8,    7,  8,
	 -7, -8,    7, -8,   -7,  7,    7,  7,
	 -7, -7,    7, -7,   -8,  7,    8,  7,
	 -8, -7,    8, -7,   -8,  6,    8,  6,
	 -8, -6,    8, -6,   -8,  5,    8,  5,
	 -8, -5,    8, -5,   -8,  4,    8,  4,
	 -8, -4,    8, -4,   -8,  3,    8,  3,
	 -8, -3,    8, -3,   -8,  2,    8,  2,
	 -8, -2,    8, -2,   -8,  1,    8,  1,
	 -8, -1,    8, -1,   -8,  0,    8,  0,
	72,										//  9 - 579
	  0,  9,    0, -9,   -1,  9,    1,  9,
	 -1, -9,    1, -9,   -2,  9,    2,  9,
	 -2, -9,    2, -9,   -3,  9,    3,  9,
	 -3, -9,    3, -9,   -4,  9,    4,  9,
	 -4, -9,    4, -9,   -5,  9,    5,  9,
	 -5, -9,    5, -9,   -6,  9,    6,  9,
	 -6, -9,    6, -9,   -7,  9,    7,  9,
	 -7, -9,    7, -9,   -8,  9,    8,  9,
	 -8, -9,    8, -9,   -8,  8,    8,  8,
	 -8, -8,    8, -8,   -9,  8,    9,  8,
	 -9, -8,    9, -8,   -9,  7,    9,  7,
	 -9, -7,    9, -7,   -9,  6,    9,  6,
	 -9, -6,    9, -6,   -9,  5,    9,  5,
	 -9, -5,    9, -5,   -9,  4,    9,  4,
	 -9, -4,    9, -4,   -9,  3,    9,  3,
	 -9, -3,    9, -3,   -9,  2,    9,  2,
	 -9, -2,    9, -2,   -9,  1,    9,  1,
	 -9, -1,    9, -1,   -9,  0,    9,  0,
	80,										// 10 - 724
	  0, 10,    0,-10,   -1, 10,    1, 10,
	 -1,-10,    1,-10,   -2, 10,    2, 10,
	 -2,-10,    2,-10,   -3, 10,    3, 10,
	 -3,-10,    3,-10,   -4, 10,    4, 10,
	 -4,-10,    4,-10,   -5, 10,    5, 10,
	 -5,-10,    5,-10,   -6, 10,    6, 10,
	 -6,-10,    6,-10,   -7, 10,    7, 10,
	 -7,-10,    7,-10,   -8, 10,    8, 10,
	 -8,-10,    8,-10,   -9, 10,    9, 10,
	 -9,-10,    9,-10,   -9,  9,    9,  9,
	 -9, -9,    9, -9,  -10,  9,   10,  9,
	-10, -9,   10, -9,  -10,  8,   10,  8,
	-10, -8,   10, -8,  -10,  7,   10,  7,
	-10, -7,   10, -7,  -10,  6,   10,  6,
	-10, -6,   10, -6,  -10,  5,   10,  5,
	-10, -5,   10, -5,  -10,  4,   10,  4,
	-10, -4,   10, -4,  -10,  3,   10,  3,
	-10, -3,   10, -3,  -10,  2,   10,  2,
	-10, -2,   10, -2,  -10,  1,   10,  1,
	-10, -1,   10, -1,  -10,  0,   10,  0,
	88,										// 11 - 885
	  0, 11,    0,-11,   -1, 11,    1, 11,
	 -1,-11,    1,-11,   -2, 11,    2, 11,
	 -2,-11,    2,-11,   -3, 11,    3, 11,
	 -3,-11,    3,-11,   -4, 11,    4, 11,
	 -4,-11,    4,-11,   -5, 11,    5, 11,
	 -5,-11,    5,-11,   -6, 11,    6, 11,
	 -6,-11,    6,-11,   -7, 11,    7, 11,
	 -7,-11,    7,-11,   -8, 11,    8, 11,
	 -8,-11,    8,-11,   -9, 11,    9, 11,
	 -9,-11,    9,-11,  -10, 11,   10, 11,
	-10,-11,   10,-11,  -10, 10,   10, 10,
	-10,-10,   10,-10,  -11, 10,   11, 10,
	-11,-10,   11,-10,  -11,  9,   11,  9,
	-11, -9,   11, -9,  -11,  8,   11,  8,
	-11, -8,   11, -8,  -11,  7,   11,  7,
	-11, -7,   11, -7,  -11,  6,   11,  6,
	-11, -6,   11, -6,  -11,  5,   11,  5,
	-11, -5,   11, -5,  -11,  4,   11,  4,
	-11, -4,   11, -4,  -11,  3,   11,  3,
	-11, -3,   11, -3,  -11,  2,   11,  2,
	-11, -2,   11, -2,  -11,  1,   11,  1,
	-11, -1,   11, -1,  -11,  0,   11,  0,
	96,										// 12 - 1062
	  0, 12,    0,-12,   -1, 12,    1, 12,
	 -1,-12,    1,-12,   -2, 12,    2, 12,
	 -2,-12,    2,-12,   -3, 12,    3, 12,
	 -3,-12,    3,-12,   -4, 12,    4, 12,
	 -4,-12,    4,-12,   -5, 12,    5, 12,
	 -5,-12,    5,-12,   -6, 12,    6, 12,
	 -6,-12,    6,-12,   -7, 12,    7, 12,
	 -7,-12,    7,-12,   -8, 12,    8, 12,
	 -8,-12,    8,-12,   -9, 12,    9, 12,
	 -9,-12,    9,-12,  -10, 12,   10, 12,
	-10,-12,   10,-12,  -11, 12,   11, 12,
	-11,-12,   11,-12,  -11, 11,   11, 11,
	-11,-11,   11,-11,  -12, 11,   12, 11,
	-12,-11,   12,-11,  -12, 10,   12, 10,
	-12,-10,   12,-10,  -12,  9,   12,  9,
	-12, -9,   12, -9,  -12,  8,   12,  8,
	-12, -8,   12, -8,  -12,  7,   12,  7,
	-12, -7,   12, -7,  -12,  6,   12,  6,
	-12, -6,   12, -6,  -12,  5,   12,  5,
	-12, -5,   12, -5,  -12,  4,   12,  4,
	-12, -4,   12, -4,  -12,  3,   12,  3,
	-12, -3,   12, -3,  -12,  2,   12,  2,
	-12, -2,   12, -2,  -12,  1,   12,  1,
	-12, -1,   12, -1,  -12,  0,   12,  0,
	104,									// 13 - 1255
	  0, 13,    0,-13,   -1, 13,    1, 13,
	 -1,-13,    1,-13,   -2, 13,    2, 13,
	 -2,-13,    2,-13,   -3, 13,    3, 13,
	 -3,-13,    3,-13,   -4, 13,    4, 13,
	 -4,-13,    4,-13,   -5, 13,    5, 13,
	 -5,-13,    5,-13,   -6, 13,    6, 13,
	 -6,-13,    6,-13,   -7, 13,    7, 13,
	 -7,-13,    7,-13,   -8, 13,    8, 13,
	 -8,-13,    8,-13,   -9, 13,    9, 13,
	 -9,-13,    9,-13,  -10, 13,   10, 13,
	-10,-13,   10,-13,  -11, 13,   11, 13,
	-11,-13,   11,-13,  -12, 13,   12, 13,
	-12,-13,   12,-13,  -12, 12,   12, 12,
	-12,-12,   12,-12,  -13, 12,   13, 12,
	-13,-12,   13,-12,  -13, 11,   13, 11,
	-13,-11,   13,-11,  -13, 10,   13, 10,
	-13,-10,   13,-10,  -13,  9,   13,  9,
	-13, -9,   13, -9,  -13,  8,   13,  8,
	-13, -8,   13, -8,  -13,  7,   13,  7,
	-13, -7,   13, -7,  -13,  6,   13,  6,
	-13, -6,   13, -6,  -13,  5,   13,  5,
	-13, -5,   13, -5,  -13,  4,   13,  4,
	-13, -4,   13, -4,  -13,  3,   13,  3,
	-13, -3,   13, -3,  -13,  2,   13,  2,
	-13, -2,   13, -2,  -13,  1,   13,  1,
	-13, -1,   13, -1,  -13,  0,   13,  0,
	112,									// 14 - 1464
	  0, 14,    0,-14,   -1, 14,    1, 14,
	 -1,-14,    1,-14,   -2, 14,    2, 14,
	 -2,-14,    2,-14,   -3, 14,    3, 14,
	 -3,-14,    3,-14,   -4, 14,    4, 14,
	 -4,-14,    4,-14,   -5, 14,    5, 14,
	 -5,-14,    5,-14,   -6, 14,    6, 14,
	 -6,-14,    6,-14,   -7, 14,    7, 14,
	 -7,-14,    7,-14,   -8, 14,    8, 14,
	 -8,-14,    8,-14,   -9, 14,    9, 14,
	 -9,-14,    9,-14,  -10, 14,   10, 14,
	-10,-14,   10,-14,  -11, 14,   11, 14,
	-11,-14,   11,-14,  -12, 14,   12, 14,
	-12,-14,   12,-14,  -13, 14,   13, 14,
	-13,-14,   13,-14,  -13, 13,   13, 13,
	-13,-13,   13,-13,  -14, 13,   14, 13,
	-14,-13,   14,-13,  -14, 12,   14, 12,
	-14,-12,   14,-12,  -14, 11,   14, 11,
	-14,-11,   14,-11,  -14, 10,   14, 10,
	-14,-10,   14,-10,  -14,  9,   14,  9,
	-14, -9,   14, -9,  -14,  8,   14,  8,
	-14, -8,   14, -8,  -14,  7,   14,  7,
	-14, -7,   14, -7,  -14,  6,   14,  6,
	-14, -6,   14, -6,  -14,  5,   14,  5,
	-14, -5,   14, -5,  -14,  4,   14,  4,
	-14, -4,   14, -4,  -14,  3,   14,  3,
	-14, -3,   14, -3,  -14,  2,   14,  2,
	-14, -2,   14, -2,  -14,  1,   14,  1,
	-14, -1,   14, -1,  -14,  0,   14,  0,
	120,									// 15 - 1689
	  0, 15,    0,-15,   -1, 15,    1, 15,
	 -1,-15,    1,-15,   -2, 15,    2, 15,
	 -2,-15,    2,-15,   -3, 15,    3, 15,
	 -3,-15,    3,-15,   -4, 15,    4, 15,
	 -4,-15,    4,-15,   -5, 15,    5, 15,
	 -5,-15,    5,-15,   -6, 15,    6, 15,
	 -6,-15,    6,-15,   -7, 15,    7, 15,
	 -7,-15,    7,-15,   -8, 15,    8, 15,
	 -8,-15,    8,-15,   -9, 15,    9, 15,
	 -9,-15,    9,-15,  -10, 15,   10, 15,
	-10,-15,   10,-15,  -11, 15,   11, 15,
	-11,-15,   11,-15,  -12, 15,   12, 15,
	-12,-15,   12,-15,  -13, 15,   13, 15,
	-13,-15,   13,-15,  -14, 15,   14, 15,
	-14,-15,   14,-15,  -14, 14,   14, 14,
	-14,-14,   14,-14,  -15, 14,   15, 14,
	-15,-14,   15,-14,  -15, 13,   15, 13,
	-15,-13,   15,-13,  -15, 12,   15, 12,
	-15,-12,   15,-12,  -15, 11,   15, 11,
	-15,-11,   15,-11,  -15, 10,   15, 10,
	-15,-10,   15,-10,  -15,  9,   15,  9,
	-15, -9,   15, -9,  -15,  8,   15,  8,
	-15, -8,   15, -8,  -15,  7,   15,  7,
	-15, -7,   15, -7,  -15,  6,   15,  6,
	-15, -6,   15, -6,  -15,  5,   15,  5,
	-15, -5,   15, -5,  -15,  4,   15,  4,
	-15, -4,   15, -4,  -15,  3,   15,  3,
	-15, -3,   15, -3,  -15,  2,   15,  2,
	-15, -2,   15, -2,  -15,  1,   15,  1,
	-15, -1,   15, -1,  -15,  0,   15,  0,
	(int8_t)128,							// 16 - 1930
	0, 16, 0, -16, -1, 16, 1, 16,
	-1, -16, 1, -16, -2, 16, 2, 16,
	-2, -16, 2, -16, -3, 16, 3, 16,
	-3, -16, 3, -16, -4, 16, 4, 16,
	-4, -16, 4, -16, -5, 16, 5, 16,
	-5, -16, 5, -16, -6, 16, 6, 16,
	-6, -16, 6, -16, -7, 16, 7, 16,
	-7, -16, 7, -16, -8, 16, 8, 16,
	-8, -16, 8, -16, -9, 16, 9, 16,
	-9, -16, 9, -16, -10, 16, 10, 16,
	-10, -16, 10, -16, -11, 16, 11, 16,
	-11, -16, 11, -16, -12, 16, 12, 16,
	-12, -16, 12, -16, -13, 16, 13, 16,
	-13, -16, 13, -16, -14, 16, 14, 16,
	-14, -16, 14, -16, -15, 16, 15, 16,
	-15, -16, 15, -16, -15, 15, 15, 15,
	-15, -15, 15, -15, -16, 15, 16, 15,
	-16, -15, 16, -15, -16, 14, 16, 14,
	-16, -14, 16, -14, -16, 13, 16, 13,
	-16, -13, 16, -13, -16, 12, 16, 12,
	-16, -12, 16, -12, -16, 11, 16, 11,
	-16, -11, 16, -11, -16, 10, 16, 10,
	-16, -10, 16, -10, -16, 9, 16, 9,
	-16, -9, 16, -9, -16, 8, 16, 8,
	-16, -8, 16, -8, -16, 7, 16, 7,
	-16, -7, 16, -7, -16, 6, 16, 6,
	-16, -6, 16, -6, -16, 5, 16, 5,
	-16, -5, 16, -5, -16, 4, 16, 4,
	-16, -4, 16, -4, -16, 3, 16, 3,
	-16, -3, 16, -3, -16, 2, 16, 2,
	-16, -2, 16, -2, -16, 1, 16, 1,
	-16, -1, 16, -1, -16, 0, 16, 0,
	(int8_t)136,							// 17 - 2187
	0, 17, 0, -17, -1, 17, 1, 17,
	-1, -17, 1, -17, -2, 17, 2, 17,
	-2, -17, 2, -17, -3, 17, 3, 17,
	-3, -17, 3, -17, -4, 17, 4, 17,
	-4, -17, 4, -17, -5, 17, 5, 17,
	-5, -17, 5, -17, -6, 17, 6, 17,
	-6, -17, 6, -17, -7, 17, 7, 17,
	-7, -17, 7, -17, -8, 17, 8, 17,
	-8, -17, 8, -17, -9, 17, 9, 17,
	-9, -17, 9, -17, -10, 17, 10, 17,
	-10, -17, 10, -17, -11, 17, 11, 17,
	-11, -17, 11, -17, -12, 17, 12, 17,
	-12, -17, 12, -17, -13, 17, 13, 17,
	-13, -17, 13, -17, -14, 17, 14, 17,
	-14, -17, 14, -17, -15, 17, 15, 17,
	-15, -17, 15, -17, -16, 17, 16, 17,
	-16, -17, 16, -17, -16, 16, 16, 16,
	-16, -16, 16, -16, -17, 16, 17, 16,
	-17, -16, 17, -16, -17, 15, 17, 15,
	-17, -15, 17, -15, -17, 14, 17, 14,
	-17, -14, 17, -14, -17, 13, 17, 13,
	-17, -13, 17, -13, -17, 12, 17, 12,
	-17, -12, 17, -12, -17, 11, 17, 11,
	-17, -11, 17, -11, -17, 10, 17, 10,
	-17, -10, 17, -10, -17, 9, 17, 9,
	-17, -9, 17, -9, -17, 8, 17, 8,
	-17, -8, 17, -8, -17, 7, 17, 7,
	-17, -7, 17, -7, -17, 6, 17, 6,
	-17, -6, 17, -6, -17, 5, 17, 5,
	-17, -5, 17, -5, -17, 4, 17, 4,
	-17, -4, 17, -4, -17, 3, 17, 3,
	-17, -3, 17, -3, -17, 2, 17, 2,
	-17, -2, 17, -2, -17, 1, 17, 1,
	-17, -1, 17, -1, -17, 0, 17, 0,
	(int8_t)144,							// 18 - 2460
	0, 18, 0, -18, -1, 18, 1, 18,
	-1, -18, 1, -18, -2, 18, 2, 18,
	-2, -18, 2, -18, -3, 18, 3, 18,
	-3, -18, 3, -18, -4, 18, 4, 18,
	-4, -18, 4, -18, -5, 18, 5, 18,
	-5, -18, 5, -18, -6, 18, 6, 18,
	-6, -18, 6, -18, -7, 18, 7, 18,
	-7, -18, 7, -18, -8, 18, 8, 18,
	-8, -18, 8, -18, -9, 18, 9, 18,
	-9, -18, 9, -18, -10, 18, 10, 18,
	-10, -18, 10, -18, -11, 18, 11, 18,
	-11, -18, 11, -18, -12, 18, 12, 18,
	-12, -18, 12, -18, -13, 18, 13, 18,
	-13, -18, 13, -18, -14, 18, 14, 18,
	-14, -18, 14, -18, -15, 18, 15, 18,
	-15, -18, 15, -18, -16, 18, 16, 18,
	-16, -18, 16, -18, -17, 18, 17, 18,
	-17, -18, 17, -18, -17, 17, 17, 17,
	-17, -17, 17, -17, -18, 17, 18, 17,
	-18, -17, 18, -17, -18, 16, 18, 16,
	-18, -16, 18, -16, -18, 15, 18, 15,
	-18, -15, 18, -15, -18, 14, 18, 14,
	-18, -14, 18, -14, -18, 13, 18, 13,
	-18, -13, 18, -13, -18, 12, 18, 12,
	-18, -12, 18, -12, -18, 11, 18, 11,
	-18, -11, 18, -11, -18, 10, 18, 10,
	-18, -10, 18, -10, -18, 9, 18, 9,
	-18, -9, 18, -9, -18, 8, 18, 8,
	-18, -8, 18, -8, -18, 7, 18, 7,
	-18, -7, 18, -7, -18, 6, 18, 6,
	-18, -6, 18, -6, -18, 5, 18, 5,
	-18, -5, 18, -5, -18, 4, 18, 4,
	-18, -4, 18, -4, -18, 3, 18, 3,
	-18, -3, 18, -3, -18, 2, 18, 2,
	-18, -2, 18, -2, -18, 1, 18, 1,
	-18, -1, 18, -1, -18, 0, 18, 0
	// clang-format on
};

/** Indices of CrawlTable to select the entries at a given distance. */
const int CrawlNum[19] = { 0, 3, 12, 45, 94, 159, 240, 337, 450, 579, 724, 885, 1062, 1255, 1464, 1689, 1930, 2187, 2460 };

void DoLighting(int nXPos, int nYPos, int nRadius, unsigned lnum)
{
}

static void DoUnLight(int nXPos, int nYPos, int nRadius)
{
}

void DoUnVision(int nXPos, int nYPos, int nRadius)
{
	int i, j, x1, y1, x2, y2;

	nRadius++;
	y1 = nYPos - nRadius;
	y2 = nYPos + nRadius;
	x1 = nXPos - nRadius;
	x2 = nXPos + nRadius;

	static_assert(DBORDERY >= MAX_LIGHT_RAD + 1, "DoUnVision skips limit-checks assuming large enough border I.");
	assert(y1 >= 0);
	assert(y2 <= MAXDUNY);
	static_assert(DBORDERX >= MAX_LIGHT_RAD + 1, "DoUnVision skips limit-checks assuming large enough border II.");
	assert(x1 >= 0);
	assert(x2 <= MAXDUNX);

	for (i = x1; i < x2; i++) {
		for (j = y1; j < y2; j++) {
			dFlags[i][j] &= ~(BFLAG_ALERT | BFLAG_VISIBLE);
		}
	}
}

static bool LightPos(int x1, int y1)
{
	//int nTrans;
	assert(IN_DUNGEON_AREA(x1, y1));
	dFlags[x1][y1] |= BFLAG_ALERT;
	return !nBlockTable[dPiece[x1][y1]];
	/* skip this to not make tiles transparent based on visible tv values. only the tv of the player's tile should matter.
	if (nBlockTable[dPiece[x1][y1]])
		return false;
	nTrans = dTransVal[x1][y1];
	if (nTrans != 0) {
		TransList[nTrans] = true;
	}
	return true;*/
}

/*
 * Mark tiles alert/visible/explored starting from nXPos:nYpos using raytracing algorithm.
 *
 * @param nXPos: the starting x-coordinate
 * @param nYPos: the starting y-coordinate
 * @param nRadius: the maximum distance where the tile might be alert/visible
 */
void DoVision(int nXPos, int nYPos, int nRadius)
{
	const int8_t* cr;
	int i, x1, y1, limit;
	int d, dx, dy, xinc, yinc;

	assert(IN_DUNGEON_AREA(nXPos, nYPos));
	dFlags[nXPos][nYPos] |= BFLAG_ALERT;
	nRadius = 2 * (nRadius + 1);
	cr = &CrawlTable[CrawlNum[15]];
	for (i = (BYTE)*cr; i > 0; i--) {
		x1 = nXPos;
		y1 = nYPos;
		limit = nRadius;
		dx = *++cr;
		dy = *++cr;

		// find out step size and direction on the y coordinate
		xinc = dx < 0 ? -1 : 1;
		yinc = dy < 0 ? -1 : 1;

		dy = abs(dy);
		dx = abs(dx);
		if (dx >= dy) {
			assert(dx != 0);

			// multiply by 2 so we round up
			dy *= 2;
			d = 0;
			do {
				d += dy;
				if (d >= dx) {
					d -= 2 * dx; // multiply by 2 to support rounding
					y1 += yinc;
					limit--;
				}
				x1 += xinc;
				limit -= 2;
				if (limit <= 0)
					break;
			} while (LightPos(x1, y1));
		} else {
			// multiply by 2 so we round up
			dx *= 2;
			d = 0;
			do {
				d += dx;
				if (d >= dy) {
					d -= 2 * dy; // multiply by 2 to support rounding
					x1 += xinc;
					limit--;
				}
				y1 += yinc;
				limit -= 2;
				if (limit <= 0)
					break;
			} while (LightPos(x1, y1));
		}
	}
}

void InitLightGFX()
{
}

void InitLighting()
{
}

unsigned AddLight(int x, int y, int r)
{
}

void InitVision()
{
	static_assert(false == 0, "InitVision fills TransList with 0 instead of false values.");
	memset(TransList, 0, sizeof(TransList));
}

DEVILUTION_END_NAMESPACE
